
[{"content":"","date":"24 октября 2024","externalUrl":null,"permalink":"/blog/tags/rest/","section":"Tags","summary":"","title":"REST","type":"tags"},{"content":" REST API (Representational State Transfer) – это архитектурный стиль взаимодействия веб-сервисов. # Он основан на простоте, масштабируемости и использовании стандартных методов HTTP. REST активно применяется при разработке веб-приложений, мобильных сервисов и интеграции различных систем.\nREST API использует HTTP-запросы для обмена данными между клиентом (например, браузером или мобильным приложением) и сервером.\nМетод Описание Пример запроса GET Получение данных GET /users – список пользователей POST Создание нового ресурса POST /users – создание пользователя PUT Полное обновление ресурса PUT /users/1 – обновление данных PATCH Частичное обновление PATCH /users/1 – изменение email DELETE Удаление ресурса DELETE /users/1 – удаление пользователя Ключевые принципы REST # 1. Клиент-серверная архитектура # Клиент (например, веб-приложение) и сервер (база данных, бизнес-логика) отделены друг от друга. Клиент делает запросы, сервер отвечает, но они не зависят друг от друга.\n2. Отсутствие состояния (Statelessness) # Каждый запрос к серверу не хранит информацию о предыдущих запросах. Все необходимые данные должны передаваться в запросе.\n❌ Плохо: Сервер запоминает авторизацию клиента.\n✅ Хорошо: Клиент передает Authorization-токен в каждом запросе.\n3. Кэширование (Caching) # REST API поддерживает кэширование, чтобы снизить нагрузку на сервер и ускорить работу приложения.\nИспользование заголовков Cache-Control, ETag для хранения копий данных на клиенте. 4. Единообразие интерфейса (Uniform Interface) # Все ресурсы API должны быть организованы по единым правилам:\nЧеткие URL-адреса (/users, /orders/123). Использование HTTP-методов по назначению. Формат данных JSON (чаще всего). 5. Разделение клиентской и серверной логики (Layered System) # API может быть многослойным – клиент не знает, через какие сервисы проходит запрос. Это повышает безопасность и гибкость системы. Пример работы REST API Запрос на получение списка пользователей\nGET /users HTTP/1.1 Host: api.example.com Accept: application/json Ответ сервера\n{ \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;Alice\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;alice@example.com\u0026#34; }, { \u0026#34;id\u0026#34;: 2, \u0026#34;name\u0026#34;: \u0026#34;Bob\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;bob@example.com\u0026#34; } Преимущества REST API # ✅ Простота – Использует стандартные HTTP-методы.\n✅ Масштабируемость – Подходит для высоконагруженных систем.\n✅ Гибкость – Может использоваться с любыми языками программирования.\n✅ Кэширование – Ускоряет работу приложения.\nREST API – это универсальный и удобный способ организации взаимодействия между клиентом и сервером. # Он использует HTTP-протокол, простые URL и JSON-формат, что делает его идеальным для веб-приложений и мобильных сервисов.\nПонимание принципов REST поможет разрабатывать надежные и масштабируемые API, которые легко интегрировать с различными системами.\n","date":"24 октября 2024","externalUrl":null,"permalink":"/blog/posts/rest-api/","section":"Полезное","summary":"REST API (Representational State Transfer) – это архитектурный стиль взаимодействия веб-сервисов.","title":"REST API","type":"posts"},{"content":"","date":"24 октября 2024","externalUrl":null,"permalink":"/blog/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"24 октября 2024","externalUrl":null,"permalink":"/blog/tags/%D0%B1%D0%B0%D0%B7%D0%B0/","section":"Tags","summary":"","title":"База","type":"tags"},{"content":" Тестирование – это не просто поиск багов, а системный процесс, направленный на повышение качества продукта. В его основе лежат семь ключевых принципов, которые помогают сделать тестирование эффективным и осмысленным. # 1. Тестирование показывает наличие дефектов, но не их отсутствие # Тестирование помогает обнаружить ошибки в системе, но оно не может гарантировать, что багов нет вообще. Даже если тесты прошли успешно, это не значит, что система полностью безошибочна.\nПример: Приложение прошло все тест-кейсы, но пользователь обнаружил баг при нестандартном использовании функции.\n2. Исчерпывающее тестирование невозможно # Полностью протестировать систему невозможно – для этого пришлось бы проверять все возможные комбинации входных данных, сценариев и условий.\nРешение: Применяются техники тест-дизайна (граничные значения, классы эквивалентности, попарное тестирование) для эффективного охвата тестами.\nПример: Форма с 5 полями, каждое из которых может принимать 10 значений. Полный перебор – 100 000 комбинаций. Реалистично протестировать только ключевые сценарии.\n3. Раннее тестирование снижает стоимость исправления багов # Чем раньше обнаружен дефект, тем дешевле его исправить. Поэтому тестирование должно начинаться на ранних этапах разработки.\nПример: Ошибка в ТЗ → исправление на этапе анализа требований (1 день работы). Та же ошибка в продакшене → затраты на баг-фиксы, поддержку, жалобы клиентов.\n4. Дефекты склонны к скоплению (Principle of Defect Clustering) # Обычно 80% дефектов находятся в 20% модулей. Это означает, что ошибки часто сосредоточены в сложных или плохо написанных частях кода.\nРешение: Фокусироваться на критических и проблемных зонах при тестировании.\nПример: В интернет-магазине большинство багов может быть в корзине и процессе оплаты, а не в разделе \u0026ldquo;О нас\u0026rdquo;.\n5. \u0026ldquo;Парадокс пестицида\u0026rdquo;: повторение одних и тех же тестов теряет эффективность # Если запускать только одни и те же тесты, со временем они перестанут находить баги. Нужно обновлять тест-кейсы, добавлять новые сценарии и использовать разные виды тестирования.\nРешение:\nАктуализировать тест-кейсы Использовать exploratory testing Применять разные техники тест-дизайна Пример: Автоматизированные тесты на форму регистрации перестали находить ошибки, но ручное тестирование выявило новый баг при вводе длинного имени.\n6. Тестирование зависит от контекста # Методы тестирования зависят от типа приложения.\nПример:\nБанковская система → упор на безопасность и надежность Мобильное приложение → удобство использования и совместимость с устройствами Онлайн-игра → нагрузочное тестирование и тестирование сетевого соединения 7. Отсутствие ошибок ≠ успешный продукт # Даже если система работает без багов, это не означает, что она удовлетворяет потребности пользователей.\nПример:\nПриложение без ошибок, но с неудобным интерфейсом – пользователи уходят. Сайт работает идеально, но не решает задачи бизнеса – продукт проваливается. Принципы тестирования помогают понять, как правильно организовать процесс тестирования, чтобы он приносил максимальную пользу. # Тестирование не может доказать отсутствие багов, но помогает их найти. Невозможно протестировать всё, но можно тестировать эффективно. Чем раньше тестирование – тем дешевле исправление багов. Ошибки концентрируются в отдельных модулях – важно выявлять эти зоны. Тест-кейсы нужно обновлять, иначе они перестанут быть полезными. Методы тестирования зависят от типа продукта. Рабочий продукт не всегда означает полезный продукт. Следование этим принципам делает тестирование более продуманным, результативным и ценным для бизнеса.\n","date":"24 октября 2024","externalUrl":null,"permalink":"/blog/posts/testing/","section":"Полезное","summary":"Тестирование – это не просто поиск багов, а системный процесс, направленный на повышение качества продукта.","title":"Принципы тестирования","type":"posts"},{"content":"","date":"24 октября 2024","externalUrl":null,"permalink":"/blog/tags/%D1%82%D0%B5%D1%81%D1%82-%D0%B4%D0%B8%D0%B7%D0%B0%D0%B9%D0%BD/","section":"Tags","summary":"","title":"Тест-Дизайн","type":"tags"},{"content":" Использование техник тест-дизайна помогает: # Сократить количество тестов, обеспечивая при этом хорошее покрытие. Покрыть ключевые случаи, исключив лишние тесты. Учесть различные состояния и переходы системы, чтобы выявить ошибки. Снизить вероятность пропущенных багов. Сделать тестирование более разнообразным. Основные техники тест-дизайна # 1. Граничные значения (Boundary Value Analysis, BVA) # Эта техника предполагает тестирование значений на границе диапазона, а также чуть ниже и чуть выше.\nПример: Если допустимый возраст – от 18 до 60, тестируем:\n✅ 17 (на 1 меньше)\n✅ 18 (граница)\n✅ 60 (граница)\n✅ 61 (на 1 больше)\nТестирование граничных значений позволяет выявлять ошибки, возникающие на стыке допустимых диапазонов.\n2. Классы эквивалентности (Equivalence Partitioning, EP) # Мы разделяем входные данные на группы, которые программа обрабатывает одинаково, и тестируем одно значение из каждой группы.\nПример: Если возрастные группы: 0–17, 18–60, 61+, можно проверить:\n✅ 10 (из 0–17)\n✅ 30 (из 18–60)\n✅ 65 (из 61+)\nВместо тестирования каждого возможного числа, мы берем по одному из каждой группы, что сокращает количество тестов без потери качества проверки.\n3. Попарное тестирование (Pairwise Testing) # Используется для тестирования комбинаций параметров без полного перебора всех вариантов.\nПример: Есть два параметра: размер (S, M, L) и цвет (красный, синий, зеленый).\nВсе комбинации = 9 тестов (3×3). С попарным тестированием можно проверить 3–4 теста, покрывая все комбинации.\n🔹 Возможные тесты: (S, красный), (M, синий), (L, зеленый), (M, красный).\nЭта техника сокращает количество тестов, но охватывает все возможные сочетания параметров.\n4. Таблица переходов состояний (State Transition Testing) # Используется для тестирования систем, зависящих от последовательности действий.\nПример банкомата:\nВставить карту Ввести PIN Выполнить операцию Если PIN введен неправильно 3 раза, карта блокируется. Таблица переходов помогает тестировать сценарии, в которых важно учитывать предыдущие действия пользователя.\n5. Таблица принятия решений (Decision Table Testing) # Помогает определить, как система должна реагировать на различные комбинации условий.\nПример если при покупке товара:\nУ клиента есть скидка и товар в наличии → скидка применяется. У клиента нет скидки, но товар в наличии → скидка не применяется. Товара нет в наличии → покупка невозможна. Использование таблицы принятия решений помогает тестировать бизнес-логику приложения.\n6. Причинно-следственный анализ (Cause-Effect Graphing) # Применяется для прогнозирования ошибок, возникающих из-за неожиданных комбинаций условий.\nПример если в форме регистрации:\nПользователь вводит дату рождения 30 февраля → система зависает. Ввод пустого поля пароля → система не проверяет его корректность. Этот метод помогает выявлять ошибки, которые сложно предсказать без анализа логики системы.\n7. Предсказание ошибок (Error Guessing) # Основано на опыте тестировщика. Предполагается, что некоторые ошибки можно предугадать, зная слабые места системы.\nПример:\nПроверка ввода невалидных символов (например, @ в поле возраста). Вставка слишком длинного текста в поле ввода. Попытка выполнить действие без обязательных данных. Метод не имеет строгих правил, но помогает находить неожиданные баги.\nТехники тест-дизайна помогают сделать тестирование более эффективным: # ✅ Сократить количество тестов без потери качества. ✅ Обеспечить хорошее покрытие ключевых случаев. ✅ Найти ошибки, которые сложно выявить случайными тестами.\nИспользование этих методов делает тестирование более структурированным и надежным, что особенно важно для сложных систем.\n","date":"24 октября 2024","externalUrl":null,"permalink":"/blog/posts/test-design/","section":"Полезное","summary":"Использование техник тест-дизайна помогает: # Сократить количество тестов, обеспечивая при этом хорошее покрытие.","title":"Техники тест-дизайна","type":"posts"},{"content":" Тестирование: Jira, Zephyr.\nАвтоматизация на Python.\nСредa разработки: Visual Studio Code.\nДополнительные инструменты: Kibana, Kafka, Kubernetes, SQL, DevTools, Postman, Docker, TeamCity.\n","date":"24 октября 2024","externalUrl":null,"permalink":"/blog/about/","section":"Добро пожаловать на мой сайт","summary":"Тестирование: Jira, Zephyr.","title":"About","type":"page"},{"content":" ","date":"23 октября 2024","externalUrl":null,"permalink":"/blog/","section":"Добро пожаловать на мой сайт","summary":" ","title":"Добро пожаловать на мой сайт","type":"page"},{"content":" ","date":"23 октября 2024","externalUrl":null,"permalink":"/blog/posts/","section":"Полезное","summary":" ","title":"Полезное","type":"posts"},{"content":" В каждый проект можно зайти и ознакомиться с деталями более подробно.\nDmitryFedoreev/Brain-games Learning project Brain Games - Hexlet Python 1 0 DmitryFedoreev/UTM-Generator-Extension A Chrome extension for quickly generating UTM URLs with customizable parameters, making it easier to track marketing campaigns. JavaScript 0 0 DmitryFedoreev/SQL-Beginner-s-Guide Гайд по sql для начинающих null 0 0 ","date":"27 мая 2024","externalUrl":null,"permalink":"/blog/projects/","section":"Добро пожаловать на мой сайт","summary":"В каждый проект можно зайти и ознакомиться с деталями более подробно.","title":"Мои проекты","type":"page"},{"content":"","externalUrl":null,"permalink":"/blog/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/blog/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/blog/series/","section":"Series","summary":"","title":"Series","type":"series"}]